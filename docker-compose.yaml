version: "3.9"

services:
  postgres:
    image: postgres:15-alpine
    container_name: postgres
    ports:
      - "${POSTGRES_PORT}:${POSTGRES_PORT}"
    volumes:
      - postgres:/var/lib/postgresql/data
    command: postgres -c 'max_connections=200'
    environment:
      - POSTGRES_USER
      - POSTGRES_PASSWORD
    networks:
      - greb-network

  mongodb:
    image: mongo
    container_name: mongodb
    ports: 
     - 27017:27017
    volumes:
     - mongodb:/data/db
    environment:
      - MONGO_INITDB_DATABASE=location
      - MONGO_INITDB_ROOT_USERNAME=admin
      - MONGO_INITDB_ROOT_PASSWORD=admin
    networks:
      - greb-network

  pgadmin:
    image: dpage/pgadmin4:6.20
    container_name: pgadmin
    volumes:
      - pgadmin:/var/lib/pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: tienhung17092004@gmail.com
      PGADMIN_DEFAULT_PASSWORD: ADMIN
      PGADMIN_LISTEN_PORT: 80
    ports: 
      - 15432:80
    depends_on:
      - postgres
    networks:
      - greb-network
  
  keycloak:
    image: quay.io/keycloak/keycloak:21.0.2
    container_name: keycloak
    command: [ 'start-dev' ]
    environment:
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
      KC_PROXY: passthrough
      KC_DB: postgres
      KC_DB_URL: jdbc:postgresql://postgres:${POSTGRES_PORT}/keycloak
      KC_DB_USERNAME: ${POSTGRES_USER}
      KC_DB_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
     - 8080:8080
    depends_on:
      - postgres
    networks:
      - greb-network

  zookeeper:
    image: confluentinc/cp-zookeeper:7.0.0
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - greb-network

  kafka:
    image: confluentinc/cp-enterprise-kafka:7.0.0
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "29092:29092"
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'false'
    networks:
      - greb-network
  
  kafka-connect:
    image: confluentinc/cp-kafka-connect:7.0.0
    container_name: kafka-connect
    depends_on:
      - kafka
    environment:
      CONNECT_BOOTSTRAP_SERVERS: 'kafka:9092'
      CONNECT_REST_ADVERTISED_HOST_NAME: kafka-connect
      CONNECT_REST_PORT: 8083
      CONNECT_GROUP_ID: kafka-connect-group
      CONNECT_CONFIG_STORAGE_TOPIC: kafka-connect-configs
      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_OFFSET_STORAGE_TOPIC: kafka-connect-offsets
      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_STATUS_STORAGE_TOPIC: kafka-connect-status
      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_KEY_CONVERTER: 'org.apache.kafka.connect.json.JsonConverter'
      CONNECT_VALUE_CONVERTER: 'org.apache.kafka.connect.json.JsonConverter'
      CONNECT_INTERNAL_KEY_CONVERTER: 'org.apache.kafka.connect.json.JsonConverter'
      CONNECT_INTERNAL_VALUE_CONVERTER: 'org.apache.kafka.connect.json.JsonConverter'
      CONNECT_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      CONNECT_PLUGIN_PATH: '/etc/kafka-connect/jars'
    ports:
      - "8083:8083"
    volumes: 
      - ./kafka/mongo-connector/lib:/etc/kafka-connect/jars
    networks:
      - greb-network

networks:
  greb-network:

volumes: 
  postgres:
  pgadmin:
  mongodb: